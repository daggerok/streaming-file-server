buildscript {
  ext {
    environmentFileDir = "."
    propertiesPluginEnvironmentNameProperty = "env"

    applicationGroup = "com.github.daggerok"
    applicationName = "streaming-file-server"
    applicationVersion = project.findProperty("com.github.daggerok.project.version") ?: "undefined"

    gradleVersion             = project.findProperty("gradle.version") ?: "undefined"
    springBootVersion         = project.findProperty("spring.boot.version") ?: "undefined"
    commonsIoVersion          = project.findProperty("commons.io.version") ?: "undefined"
    lombokVersion             = project.findProperty("lombok.version") ?: "undefined"
    logbackVersion            = project.findProperty("logback.version") ?: "undefined"
    slf4jVersion              = project.findProperty("slf4j.version") ?: "undefined"
    vavrVersion               = project.findProperty("vavr.version") ?: "undefined"
    toolVersion               = project.findProperty("tool.version") ?: "undefined"
    spotbugsVersion           = project.findProperty("spotbugs.version") ?: "undefined"
    jgivenVersion             = project.findProperty("jgiven.version") ?: "undefined"
    selenideVersion           = project.findProperty("selenide.version") ?: "undefined"
    powermockitoVersion       = project.findProperty("powermockito.version") ?: "undefined"
    popperVersion             = project.findProperty("popper.version") ?: "undefined"
    jqueryVersion             = project.findProperty("jquery.version") ?: "undefined"
    fontAwesomeVersion        = project.findProperty("font.awesome.version") ?: "undefined"
    bootstrapVersion          = project.findProperty("bootstrap.version") ?: "undefined"
    bootstrapFileInputVersion = project.findProperty("bootstrap.file.input.version") ?: "undefined"
    asciidoctorjPdfVersion    = project.findProperty("asciidoctorj.pdf.version") ?: "undefined"
    jrubyCompleteVersion      = project.findProperty("jruby.complete.version") ?: "undefined"
    groovyVersion             = project.findProperty("groovy.version") ?: "undefined"
  }

  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    classpath("org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion")
    classpath("org.jruby:jruby-complete:$jrubyCompleteVersion")
  }

  configurations.all {
    resolutionStrategy {
      force("org.codehaus.groovy:groovy-all:$groovyVersion")
    }
  }
}

plugins {
  id("com.github.spotbugs") version "1.6.10"
  id("net.saliman.properties") version "1.4.6"
  id("com.github.ben-manes.versions") version "0.21.0"

  id("cn.bestwu.propdeps") version "0.0.10" apply false
  id("cn.bestwu.propdeps-idea") version "0.0.10" apply false
  id("cn.bestwu.propdeps-maven") version "0.0.10" apply false
  id("io.franzbecker.gradle-lombok") version "2.1" apply false
  id("cn.bestwu.propdeps-eclipse") version "0.0.10" apply false
  id("com.ewerk.gradle.plugins.querydsl") version "1.0.10" apply false
  id("io.spring.dependency-management") version "1.0.7.RELEASE" apply false
  id("org.ajoberstar.git-publish") version "2.0.0" /* "2.0.0-rc.2" *//* +0.3.0 +0.2.2 | -0.4.1 */ apply false
  id("org.asciidoctor.convert") version "1.5.9.1" apply false // on windows my fail use instead: 1.5.8.1
  id("com.avast.gradle.docker-compose") version "0.7.1" apply false // fail with 0.8.9 + asciidoctor ruby
  // gradle -Dorg.gradle.jvmargs="-Xms2g -Xmx2g" -S dependencyUpdates -Drevision=release --parallel
}

allprojects {
  version = project.applicationVersion
  group = project.applicationGroup
  defaultTasks("clean", "build")
}

wrapper {
  gradleVersion = project.gradleVersion
  distributionType = Wrapper.DistributionType.BIN
}

apply(from: "$project.rootDir/gradle/ide.gradle")
apply(from: "$project.rootDir/gradle/clean.gradle")
apply(from: "$project.rootDir/gradle/subprojects.gradle")
apply(from: "$project.rootDir/gradle/documentation.gradle")
