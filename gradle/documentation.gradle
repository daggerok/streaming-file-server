buildscript {
  repositories {
    gradlePluginPortal()
  }
  ext {
    asciidocBuildDir = "$buildDir/asciidoc"
    targetDeneratedDocsDir = "$rootDir/target/generated-docs"
  }
}


apply plugin: "org.asciidoctor.convert"

dependencies {
  asciidoctor("org.asciidoctor:asciidoctorj-diagram:$asciidoctorjDiagramVersion")
  asciidoctor("org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion")
//  asciidoctor("org.asciidoctor:asciidoctorj-diagram:1.5.18")
}

asciidoctor {
  sourceDir = project.file("docs")
  sources {
    include "index.adoc"
  }
  outputDir = project.file("$asciidocBuildDir")
  attributes toc: 'left',
      ruby: 'erubis',
      doctype: 'book',
      numbered: false,
      linkattrs: true,
      sectanchors: true,
      encoding: 'utf-8',
      sectlink: true,
      idprefix: '',
      docinfo1: '',
      icons: 'font',
      idseparator: '-',
      setanchors: 'true',
      imagesdir: './static/images',
      'source-highlighter': 'coderay',
      'toc-title': 'Table of Contents',
      'root-project-name': rootProject.name,
      'project-version': rootProject.version,
      'build-gradle': project.file("build.gradle"),
      'github-url': "https://github.com/daggerok/${rootProject.name}"

  logDocuments = true
  //backends 'pdf', 'html5'
  backends = ['html5', 'pdf']
  requires = ['asciidoctor-diagram']
}

asciidoctor.doLast {
  def html5 = "$asciidocBuildDir/html5"
  project.file("$html5/404.html").text = project.file("$html5/index.html").text
  project.file("$html5/.nojekyll").text = ''
}

task documentation(type: Copy, dependsOn: [asciidoctor]) {
  shouldRunAfter clean, asciidoctor
  from "$asciidoctor.outputDir/html5"
  from "$asciidoctor.outputDir/pdf"
  from "$asciidoctor.sourceDir/static", {
    into '.'
  }
  into targetDeneratedDocsDir
}
