buildscript {
  repositories {
    gradlePluginPortal()
  }
  ext {
    asciidocBuildDir = "$buildDir/asciidoc"
    targetDeneratedDocsDir = "$rootDir/target/generated-docs"
  }
}

// apply plugin: "org.asciidoctor.convert"
apply plugin: "org.asciidoctor.jvm.convert"
apply plugin: "org.asciidoctor.jvm.gems"
apply plugin: "org.asciidoctor.jvm.pdf"

repositories {
  mavenCentral()
  jcenter()
  maven {
    url 'http://rubygems-proxy.torquebox.org/releases'
    allowInsecureProtocol true
  }
  ruby.gems()
}

dependencies {
  asciidoctorGems 'rubygems:asciidoctor-pdf:1.5.3'
  asciidoctorGems 'rubygems:coderay:1.1.2'
  asciidoctorGems 'rubygems:rouge:3.17.0'
}

asciidoctorj {
  requires = [
      'asciidoctor-diagram',
      'asciidoctor-pdf',
  ]
  modules {
    diagram.use()
    pdf.use()
  }
}

asciidoctorPdf {
  dependsOn asciidoctorGemsPrepare
  shouldRunAfter clean

  sourceDir = project.file("docs")
  sources {
    include "index.adoc"
  }
  outputDir = project.file("$asciidocBuildDir")

  asciidoctorj {
    requires 'rouge'
    attributes toc: 'left',
        ruby: 'erubis',
        doctype: 'book',
        numbered: false,
        linkattrs: true,
        sectanchors: true,
        encoding: 'utf-8',
        sectlink: true,
        idprefix: '',
        docinfo1: '',
        icons: 'font',
        idseparator: '-',
        setanchors: 'true',
        imagesdir: './static/images',
        'source-highlighter': 'rouge',
        'toc-title': 'Table of Contents',
        'project-name': rootProject.name,
        'gradle-project-name': rootProject.name,
        'root-project-name': rootProject.name,
        'project-version': rootProject.version,
        'revnumber': rootProject.version,
        'build-gradle': project.file("build.gradle"),
        'github-url': "https://github.com/daggerok/${rootProject.name}"
  }

  logDocuments = true
  baseDirFollowsSourceFile()
}

asciidoctor {
  dependsOn asciidoctorGemsPrepare, asciidoctorPdf
  shouldRunAfter clean, asciidoctorPdf

  sourceDir = project.file("docs")

  sources {
    include "index.adoc"
  }

  outputDir = project.file("$asciidocBuildDir")

  attributes toc: 'left',
      ruby: 'erubis',
      doctype: 'book',
      numbered: false,
      linkattrs: true,
      sectanchors: true,
      encoding: 'utf-8',
      sectlink: true,
      idprefix: '',
      docinfo1: '',
      icons: 'font',
      idseparator: '-',
      setanchors: 'true',
      imagesdir: './static/images',
      'source-highlighter': 'coderay',
      'toc-title': 'Table of Contents',
      'project-name': rootProject.name,
      'gradle-project-name': rootProject.name,
      'root-project-name': rootProject.name,
      'project-version': rootProject.version,
      'revnumber': rootProject.version,
      'build-gradle': project.file("build.gradle"),
      'github-url': "https://github.com/daggerok/${rootProject.name}"

  logDocuments = true
  baseDirFollowsSourceFile()
}

asciidoctor.doLast {
  def html5 = "${asciidoctor.outputDir}"
  project.file("$html5/404.html").text = project.file("$html5/index.html").text
  project.file("$html5/.nojekyll").text = ''
}

task documentation(type: Copy, dependsOn: [asciidoctor, asciidoctorPdf]) {
  // // duplicatesStrategy = DuplicatesStrategy.INCLUDE
  // duplicatesStrategy = DuplicatesStrategy.WARN
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  shouldRunAfter clean, asciidoctor, asciidoctorPdf
  // from "$asciidocBuildDir" { into '.' }
  from "$asciidoctor.outputDir"
  into targetDeneratedDocsDir
}
